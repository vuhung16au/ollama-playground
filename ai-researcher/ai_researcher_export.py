import json
import pandas as pd
from datetime import datetime
import streamlit as st

def export_research_data(response_state, query, model_used, total_time):
    """Add export functionality for research data."""
    
    st.subheader("📤 Export & Share")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("📋 Export JSON"):
            export_data = {
                "query": query,
                "timestamp": datetime.now().isoformat(),
                "model_used": model_used,
                "response": str(response_state["response"]),
                "sources": response_state["sources"],
                "metrics": response_state.get("step_metrics", {}),
                "total_time": total_time
            }
            
            st.download_button(
                label="💾 Download JSON",
                data=json.dumps(export_data, indent=2),
                file_name=f"research_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col2:
        if st.button("📝 Export Markdown"):
            response_content = str(response_state["response"])
            markdown_content = f"""# Research Report: {query}

**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**Model:** {model_used}  
**Duration:** {total_time:.2f} seconds

## 🔍 Research Results

{response_content}

## 🔗 Sources

{chr(10).join(f"{i+1}. {source}" for i, source in enumerate(response_state["sources"]))}

## 📊 Performance Metrics

- **Total Processing Time:** {total_time:.2f}s
- **Total Tokens:** {sum(step['total_tokens'] for step in response_state.get('step_metrics', {}).values())}
- **Average Speed:** {sum(step['total_tokens'] for step in response_state.get('step_metrics', {}).values()) / total_time:.2f} tokens/sec

---
*Generated by AI Researcher*
"""
            
            st.download_button(
                label="💾 Download Markdown",
                data=markdown_content,
                file_name=f"research_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                mime="text/markdown"
            )
    
    with col3:
        if st.button("📊 Export CSV"):
            # Create a summary CSV
            csv_data = {
                "Query": [query],
                "Timestamp": [datetime.now().isoformat()],
                "Model": [model_used],
                "Sources_Count": [len(response_state["sources"])],
                "Response_Length": [len(str(response_state["response"]))],
                "Total_Time": [total_time],
                "Total_Tokens": [sum(step['total_tokens'] for step in response_state.get('step_metrics', {}).values())]
            }
            
            csv_df = pd.DataFrame(csv_data)
            csv_string = csv_df.to_csv(index=False)
            
            st.download_button(
                label="💾 Download CSV",
                data=csv_string,
                file_name=f"research_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            ) 